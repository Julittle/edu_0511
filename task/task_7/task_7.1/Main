import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.InetSocketAddress;
import java.net.Proxy;
import java.net.URL;
import java.net.URLConnection;
/*
  * task_6.2 - рабочие ip адреса необходимо складывать в файл good.txt
 *  */

public class Main {
    public static final String ANSI_RESET = "\u001B[0m";
    public static final String ANSI_BLACK = "\u001B[30m";
    public static final String ANSI_RED = "\u001B[31m";
    public static final String ANSI_GREEN = "\u001B[32m";

    public static void main(String[] args) {
        try {
            FileInputStream fin = new FileInputStream("C:\\Users\\Юлия\\Desktop\\java\\ip.txt");
            FileOutputStream fout = new FileOutputStream("C:\\Users\\Юлия\\Desktop\\java\\good.txt");
            int i;
            String proxy = "";
            System.out.println("Файл открыт");
            while ((i = fin.read()) != -1) {
                if (i == 13) continue;
                else if (i == 10) {
                    String ip = proxy.split(":")[0];
                    String port = proxy.split(":")[1];
                    Thread thread = new Thread(new Runnable() {
                        @Override
                        public void run() {
                           try {
                                if (checkProxy(ip, Integer.parseInt(port))) {
                                    //в консоль
                                    System.out.println("IP: "+ip+":"+port+ANSI_GREEN+" работает"+ANSI_RESET);
                                    //в файл
                                    String s = "IP: "+ip+":"+port+" работает"+"\r\n";
                                    fout.write(s.getBytes(StandardCharsets.UTF_8));
                                }else{
                                    System.out.println("IP: "+ip+":"+port+ANSI_RED+" не работает"+ANSI_RESET);}
                            }catch (
                                    IOException e){
                                e.printStackTrace();
                            }
                       }
                    });
                    thread.start();
                    proxy = "";
                } else if (i != 9) {
                    proxy += (char) i;
                } else {
                    proxy += ":";
                }
            }

        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    public static Boolean checkProxy(String ip, int port){
        try {
            Proxy proxy = new Proxy(Proxy.Type.HTTP,new InetSocketAddress(ip, port));
            URLConnection urlConnection = new URL("https://vozhzhaev.ru/test.php").openConnection(proxy);
            InputStream is = urlConnection.getInputStream();
            InputStreamReader reader = new InputStreamReader(is);
            int rc;
            StringBuilder sb = new StringBuilder();
            while ((rc = reader.read()) != -1){
                sb.append((char)rc);
            }
            return true;
        } catch (Exception e) {
            return false;
        }
    }
}
